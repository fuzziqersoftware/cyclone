{
  // cyclone configuration file.

  // changes to this file are not reflected until the server is restarted,
  // except where noted. cyclone checks for changes to this file approximately
  // every 10 seconds.

  // list of addresses on which to listen for HTTP connections. items in this
  // list must be one of the following formats:
  // - an int, to listen on that port on all interfaces.
  // - a string of "address:port", to listen on a specific interface.
  // - a string without a : in it, to listen on a Unix socket.
  "http_listen": [5050],
  // list of addresses on which to listen for the Graphite line receiver
  // protocol.
  "line_listen": [2003, "/var/run/cyclone-line.sock"],
  // list of addresses on which to listen for the Graphite pickle protocol.
  "pickle_listen": [2004, "/var/run/cyclone-pickle.sock"],
  // port on which to run the Thrift server. unlike the other servers, multiple
  // addresses or specific interfaces cannot be used here.
  "thrift_port": 2000,

  // number of threads to service requests for each type of server. the line
  // receiver and pickle interfaces are both handled by the stream server.
  "http_threads": 4,
  "stream_threads": 4,
  "thrift_threads": 4,

  // this controls cyclone's responsiveness to exit signals.
  "exit_check_usecs": 5000000,

  // cyclone generates metrics about internal operations every so often; this
  // specifies how often it reports them. to disable stats reporting, set this
  // to zero. this field can be changed without restarting the server.
  "stats_report_usecs": 60000000,

  // maximum number of whisper database files to keep open at once. this field
  // can be changed without restarting the server.
  "open_file_cache_size": 16384,

  // the store configuration specifies how data is accessed. most setups
  // probably will want to use a write buffer store around a cached disk store,
  // which is what the default configuration (below this comment) uses. there
  // are several other types of stores, which can be configured as follows:
  //
  // -- multi store: this store distributes data between multiple substores
  //    using a consistent hashing algorithm. each substore has a unique name
  //    which is used as its hash key.
  // {
  //   "store_type": "multi",
  //   "stores": {
  //     "store1": {...},
  //     "store2": {...},
  //     ...
  //   }
  // }
  //
  // -- remote store: this store forwards all of its read and write requests to
  //    a remote Cyclone server via the thrift interface.
  // {
  //   "store_type": "remote",
  //   "hostname": "remote-server1",
  //   "port": 2000, // thrift port on the remote server
  // }
  //
  // -- disk store: this store reads and writes data in whisper files in a local
  //    data directory.
  // {
  //   "store_type": "disk",
  //   "directory": "/path/to/cyclone/data",
  // }
  //
  // -- cached disk store: same as a disk store, but maintains a metadata cache
  //    on top of the disk, reducing the number of reads on the underlying disk.
  //    the cache is automatically populated and doesn't have config options.
  //    unlike non-cached disk stores, operating on the underlying whisper files
  //    while the server is running is not recommended.
  // {
  //   "store_type": "cached_disk",
  //   "directory": "/path/to/cyclone/data",
  // }
  //
  // -- write buffer: this store wraps another store and batches writes to the
  //    underlying store. the writes are flushed asynchronously in a set of
  //    background threads.
  // {
  //   "store_type": "write_buffer",
  //   "num_write_threads": 4,
  //   "batch_size": 1000, // number of series to write in a single write() call
  //   "substore": {...}, // config for the wrapped store
  // }
  //
  // -- read only: this store wraps another store and prevents writes to the
  //    underlying store.
  // {
  //   "store_type": "read_only",
  //   "substore": {...}, // config for the wrapped store
  // }
  //
  // -- empty store: this store discards all writes and returns empty results
  //    for all reads, sort of like MySQL's BLACKHOLE and Linux's /dev/null.
  // {
  //   "store_type": "empty",
  // }
  "store_config": {
    "type": "write_buffer",
    "num_write_threads": 4,
    "batch_size": 100,
    "substore": {
      "type": "cached_disk",
      "directory": "/cyclone-data",
    },
  },

  // rules for automatic series creation. when cyclone receives writes for which
  // no series currently exists, it checks if the key name matches any of these
  // rules (in order) and automatically creates the series with the given
  // parameters for the first rule that matches. if no rules match, the data is
  // discarded.
  //
  // rules are 4-tuples of this format:
  // [key_pattern, retentions, x_files_factor, aggregation_method]
  //
  // -- key_pattern is the patter to match the keys against. in these patterns,
  //    [abc] matches the characters a, b, or c; {abc,def,ghi} matches the
  //    substrings "abc", "def", or "ghi"; * matches any number of characters
  //    except . (period); ** matches any number of characters.
  // -- retentions are comma-separated pairs of "seconds_per_point:num_points".
  //    either of these quantities may be expressed in a time length instead of
  //    a bare number.
  // -- x_files_factor is the proportion of datapoints that must be present in
  //    each interval for a propagation to occur to the next lower resolution.
  // -- aggregation_method is one of the following strings: "average", "sum",
  //    "last", "min", "max". this specifies how to combine datapoints into
  //    lower-resolution archives.
  //
  // this field can be changed without restarting the server.
  "autocreate_rules": [
    ["cyclone.**", "60:30d,3600:120d", 0, "average"],
    ["test_autocreate.**.autokey", "60:90d", 0, "average"],
    ["test_autocreate.*.autokey", "120:90d", 0, "average"],
    ["**.autokey", "1800:90d", 0, "average"],
    ["**", "3600:90d", 0, "average"],
  ],
}